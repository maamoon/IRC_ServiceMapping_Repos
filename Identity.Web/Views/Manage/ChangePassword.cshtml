@model Identity.Web.Models.ChangePasswordViewModel
@{

    Layout = "";
}

<div class="modal fade" id="changepassModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel"></h4>
            </div>
            <div class="login-box">
                <div class="login-box-body">
                    @using (Html.BeginForm("ChangePassword", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "changePassFrm" }))
                    {
                    @Html.AntiForgeryToken()
                    <h4 class="col-md-offset-3">Change Password Form</h4>
                    <hr />
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(m => m.OldPassword, new { @class = "col-md-offset-1 col-md-4 control-label" })
                        <div class="col-md-6">
                            @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewPassword, new { @class = "col-md-offset-1 col-md-4 control-label" })
                        <div class="col-md-6">
                            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-offset-1 col-md-4 control-label" })
                        <div class="col-md-6">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-3 col-md-10">
                            <input type="submit" value="Change password" class="btn btn-default" />
                        </div>
                    </div>
                    }
                    @section Scripts {
                        @Scripts.Render("~/bundles/jqueryval")
                    }

                </div>
            </div>
        </div>
    </div>
</div>

<script>
    debugger;

    jQuery.validator.addMethod( "OneSpecialChar", function ( value, element )
    {
        if ( /(?=.*[$@@$!%*#?&])[A-Za-z\d$@@$!%*#?&]{7,}$/.test( value ) )
        {
            return true;
        } else
        {
            return false;
        };
    }, "Password should have at least on special" );


    $( "#changePassFrm" ).validate( {
        rules: {
            OldPassword: {
                required: true,
            },
            NewPassword: {
                required: true,
                minlength: 6,
                OneSpecialChar: true
            },
            ConfirmPassword: {
                required: true,
                equalTo: "#NewPassword"
            }
        },
        messages: {
            OldPassword: {
                required: "this field is required",

            }
             ,
            NewPassword:
                {
                    required: "this field is required",
                    minlength: "At Least 6 Digits",
                    OneSpecialChar: "At Least One Special Charctor"
                },
            ConfirmPassword: {
                required: "this field is required",
                equalTo: "Confirm Password Does not match with Password"
            },

        },
        errorElement: 'div',
        errorClass: 'help-block',
        focusInvalid: true,
        ignore: [],
        highlight: function ( e )
        {
            $( e ).closest( '.form-group' ).removeClass( 'has-info' ).addClass( 'has-error' );
            if ( $( e ).attr( 'HolderTab' ) != 'undefiend' || $( e ).attr( 'HolderTab' ) != null )
            {
                if ( !$( e ).closest( '.form-group' ).hasClass( 'has-info' ) )
                {
                    var tabId = $( e ).attr( 'HolderTab' );
                    $( '#' + tabId ).addClass( 'has-error' );
                    $( '#' + tabId ).click();
                }
            }
        },
        success: function ( e )
        {

            $( e ).closest( '.form-group' ).removeClass( 'has-error' ).addClass( 'has-info' );

            if ( typeof $( e ).closest( '.form-group' ).find( ':input' ).attr( 'parentDiv' ) !== "undefined" || $( e ).closest( '.form-group' ).find( ':input' ).attr( 'parentDiv' ) != null )
            {
                var ParentDiv = $( e ).closest( '.form-group' ).find( ':input' ).attr( 'parentDiv' );
                if ( $( '#' + ParentDiv ).find( '.has-error' ).length == 0 )
                {
                    var tabId = $( e ).closest( '.form-group' ).find( ':input' ).attr( 'HolderTab' );
                    $( '#' + tabId ).removeClass( 'has-error' );
                }
                // $('#' + tabId).click();
            }
            $( e ).remove();
        },
        errorPlacement: function ( error, element )
        {

            if ( element.attr( 'HolderTab' ) != 'undefiend' || element.attr( 'HolderTab' ) != null )
            {
                if ( !element.closest( '.form-group' ).hasClass( 'has-info' ) )
                {
                    var tabId = element.attr( 'HolderTab' );
                    $( '#' + tabId ).addClass( 'has-error' );
                    $( '#' + tabId ).click();
                }
            }
            if ( element.is( 'input[type=checkbox]' ) || element.is( 'input[type=radio]' ) )
            {

                var controls = element.closest( 'div[class*="col-"]' );
                if ( controls.find( ':checkbox,:radio' ).length > 1 ) controls.append( error );
                else error.insertAfter( element.nextAll( '.lbl:eq(0)' ).eq( 0 ) );
            }
            else if ( element.is( 'select' ) )
            {

                error.insertAfter( element.siblings( '[class*="select2-container"]:eq(0)' ) );
            }
            else if ( element.is( '.chosen-select' ) )
            {

                error.insertAfter( element.siblings( '[class*="chosen-container"]:eq(0)' ) );
            }
            else
            {
                error.insertAfter( element );
            }

        },
        submitHandler: function ( form )
        {
            //form.submit();
            debugger;
            $.post( '/Manage/ChangePassword', $( '#changePassFrm' ).serializeArray(), function ( data )
            {
                if ( data.Errors !== undefined )
                {
                    if ( data.Errors.length > 0 )
                    {
                        CustomAlert( data.Errors[0], data.Errors[0], BootstrapDialog.TYPE_DANGER, function ()
                        {
                        } );
                    }
                }
                else
                {
                    CustomAlert( 'Password Changed Successfully', 'Password Changed Successfully', BootstrapDialog.TYPE_DANGER, function ()
                    {
                        $( '#changepassModel' ).modal( 'toggle' );
                    } );
                }

            } )
        }
    } );

</script>